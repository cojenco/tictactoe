{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","onClickCallback","id","value","Board","squareList","squares","flat","map","square","key","generateSquareComponents","PLAYER_1","PLAYER_2","generateSquares","currentId","row","push","col","App","useState","setSquares","currentPlayer","setPlayer","winner","setWinner","checkForWinner","emptySquares","i","j","squareID","Math","floor","newSquaresState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0884bc91.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Square.css'\n\nconst Square = (props) => {\n\n  return <button\n    className=\"square\"\n    onClick={() => props.onClickCallback(props.id)}>\n    {props.value}\n  </button>\n}\n\nSquare.propTypes = {\n  value: PropTypes.string.isRequired,\n  onClickCallback: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default Square\n","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\n\nconst generateSquareComponents = (squares, onClickCallback) => {\n  return squares.flat().map((square) => {\n    return(\n      <Square \n        id={square.id} \n        value={square.value}\n        key={square.id}\n        onClickCallback={onClickCallback}\n      />\n    );\n  })\n};\n\nconst Board = ({ squares, onClickCallback }) => {\n  const squareList = generateSquareComponents(squares, onClickCallback);\n  return <div className=\"grid\" >\n    {squareList}\n  </div>\n}\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string.isRequired\n      })\n    )\n  ),\n  onClickCallback: PropTypes.func.isRequired,\n};\n\nexport default Board;","import React, { useState } from 'react';\nimport './App.css';\n\nimport Board from './components/Board';\n\n\nconst App = () => {\n  const [squares, setSquares] = useState(generateSquares());\n  const [currentPlayer, setPlayer] = useState(PLAYER_1);\n  const [winner, setWinner] = useState(null);\n  \n \n  const handleClickMove = (squareID) => {\n    const row = Math.floor(squareID / 3);  //row# = id / total#columns\n    const col = squareID % 3;              //col# = id % total#colimns\n\n    if (!winner && !squares[row][col].value) {   //if winner === null && sqaure_value === ''\n      const newSquaresState = [...squares];      //make shallow copy with spread operator\n      newSquaresState[row][col].value = currentPlayer;\n\n      if (currentPlayer === PLAYER_1) {\n        setPlayer(PLAYER_2);\n      } else {\n        setPlayer(PLAYER_1);\n      }\n\n      setSquares(newSquaresState);\n      checkForWinner(squares);\n    }\n  }\n\n  \n  const checkForWinner = (squares) => {\n    if (squares[1][1].value && squares[0][0].value === squares[1][1].value && squares[1][1].value === squares[2][2].value) {\n      return setWinner(squares[1][1].value);  //winning by diagonal right\n    } else if (squares[1][1].value && squares[0][2].value === squares[1][1].value && squares[1][1].value === squares[2][0].value) {\n      return setWinner(squares[1][1].value);  //winning by diagonal left\n    } \n\n    let emptySquares = 0;                       //to use for handling Ties\n\n    for(let i = 0; i < 3; i++) {\n      if(squares[i][0].value && squares[i][0].value === squares[i][1].value && squares[i][1].value === squares[i][2].value) {\n        return setWinner(squares[i][0].value);  //winning by a row       //here i is row\n      }\n      if(squares[0][i].value && squares[0][i].value === squares[1][i].value && squares[1][i].value === squares[2][i].value) {\n        return setWinner(squares[0][i].value);  //winning by a column    //here i is column\n      }\n\n      // Handling in case of Ties // Using i as row, j as column\n      for(let j = 0; j < 3; j++) {\n        if (!squares[i][j].value) {\n          emptySquares += 1\n        }\n      }\n    }\n    \n    // Handling in case of Ties\n    if(!emptySquares) {                         \n      return setWinner('X and Y. It\\'s a TIE!');\n    }\n  }\n\n\n  const resetGame = () => {\n    setSquares(generateSquares());\n    setPlayer(PLAYER_1);\n    setWinner(null);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Tic Tac Toe</h1>\n        <h2> {winner ? `The winner is Player ${winner}` : `Your turn, Player ${currentPlayer}`}</h2>\n        <button onClick={resetGame}>Reset Game</button>\n      </header>\n      <main>\n        <Board squares={squares} onClickCallback={handleClickMove}/>\n      </main>\n    </div>\n  );\n}\n\nconst PLAYER_1 = 'X';\nconst PLAYER_2 = 'O';\n\nconst generateSquares = () => {\n  const squares = [];\n  let currentId = 0;\n\n  for (let row = 0; row < 3; row += 1) {\n    squares.push([]);\n    for (let col = 0; col < 3; col += 1) {\n      squares[row].push({\n        id: currentId,\n        value: '',\n      });\n      currentId += 1;\n    }\n  }\n\n  return squares;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}